@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using SmartSchool.Web.Data

@inject IServiceScopeFactory serviceScopeFactory
@inject RoleManager<IdentityRole> roleManager

<div class="modal fade" id="error-modal" role="dialog" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document" style="max-width: 500px">
        <div class="modal-content position-relative">
            <div class="position-absolute top-0 end-0 mt-2 me-2 z-1">
                <button class="btn-close btn btn-sm btn-circle d-flex flex-center transition-base"
                        data-bs-toggle="modal" data-bs-target="#error-modal"></button>
            </div>
            <div class="modal-body p-0" style="margin-left:3px">
                <div class="rounded-top-3 py-3 ps-4 pe-6 bg-body-tertiary">
                    <h4 class="mb-1" id="modalExampleDemoLabel">Add a new role </h4>
                </div>
                <div class="p-4 pb-0">
                    <form method="post" @formname="addRole" @onsubmit="SubmitNewRole">
                        <div class="mb-3">
                            <label class="col-form-label">Role name:</label>
                            <InputText @bind-Value="NewRoleName" class="form-control" />
                        </div>
                    </form>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" type="button" data-bs-dismiss="modal">Close</button>
                <button type="submit" class="btn btn-success" @onclick="SubmitNewRole">Add role </button>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    public required string NewRoleName { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<IdentityRole> OnRoleAdded { get; set; }
    public async Task SubmitNewRole()
    {
        using var scope = serviceScopeFactory.CreateScope();
        var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
        var role = new IdentityRole(NewRoleName);
        var result = await roleManager.CreateAsync(role);
        await OnRoleAdded.InvokeAsync(role);
        NewRoleName = string.Empty;
    }
}